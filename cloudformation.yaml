AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TEXTEXTRACTOUTPUTPREFIX:
    Type: String
    Default: pdfoutputs
    Description: Enter the Text Extract Output Prefix

  SourceCodeBucket:
    Type: String
    Default: fsi-multimodal-code
    Description: Enter the name of the Text Extract Source Bucket
  SourceCodeprefix:
    Type: String
    Default: code/
    Description: Enter the name of the Text Extract Source Bucket
  AUDIOTRANSCRIPTSDESTBUCKETPREFIX:
    Type: String
    Default: audiooutputs/
    Description: Enter the name of the Text Extract Source Bucket 

Resources:

 AthenaQueryResultBucket:
    Type: AWS::S3::Bucket

 LambdaZipsBucket:
    Type: AWS::S3::Bucket

 QueryStagingBucket:
    Type: 'AWS::S3::Bucket'

 MultimodalOutputBucketResource:
    Type: 'AWS::S3::Bucket'

 TextractArchiveBucketResource:
    Type: 'AWS::S3::Bucket'

 TextractRawOutputBucketResource:
    Type: 'AWS::S3::Bucket'

 TextractSourceBucketResource:
    Type: 'AWS::S3::Bucket'

 AudioTranscriptsSourceBucketResource:
    Type: 'AWS::S3::Bucket'

 StockDataSourceBucket:
    Type: 'AWS::S3::Bucket'
    
 AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: fsi-workgroup
      # Add additional properties if needed, such as State, Description, etc.
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub "s3://${AthenaQueryResultBucket}/query-results/"
 
 MultiModalSagemakerNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: MultiModalSagemakerInstance
      InstanceType: ml.t2.medium
      RoleArn: !GetAtt SageMakerNotebookRole.Arn

 SageMakerNotebookRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SageMakerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AmazonKendraFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceNotebookRole

      Policies:
        - PolicyName: AthenaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action: athena:GetTableMetadata
                Resource: "*"
        - PolicyName: S3Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                Resource:
                  - Fn::Sub: "arn:aws:s3:::${StockDataSourceBucket}/*"
                  - Fn::Sub: "arn:aws:s3:::${QueryStagingBucket}/*"
                  - Fn::Sub: "arn:aws:s3:::${StockDataSourceBucket}/*"
                  - Fn::Sub: "arn:aws:s3:::${AudioTranscriptsSourceBucketResource}/*"
                  - Fn::Sub: "arn:aws:s3:::${TextractSourceBucketResource}/*"
                  - Fn::Sub: "arn:aws:s3:::${TextractArchiveBucketResource}/*"
                  - Fn::Sub: "arn:aws:s3:::${MultimodalOutputBucketResource}/*"

 FSITextract:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: FSI-TextractProcessingFunction
      Runtime: python3.10
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FSITextractRole.Arn
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${SourceCodeprefix}FSI-textextract-47f9723d-dfff-4b72-a9b2-4758f612aec6.zip'
      Environment:
        Variables:
          MULTIMODAL_OUTPUT_BUCKET: !Ref MultimodalOutputBucketResource
          TEXTEXTRACT_ARCHIVE_BUCKET: !Ref TextractArchiveBucketResource
          TEXTEXTRACT_OUTPUT_PREFIX: !Ref TEXTEXTRACTOUTPUTPREFIX
          TEXTEXTRACT_RAW_OUTPUT_BUCKET: !Ref TextractRawOutputBucketResource
          TEXTEXTRACT_ROLE_ARN: !GetAtt TextExractRole.Arn
          TEXTEXTRACT_SOURCE_BUCKET: !Ref TextractSourceBucketResource
 FSISentimentDetecttion:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: FSI-SentimentDetecttion
      Runtime: python3.10
      Timeout: 600
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FSISentimentDetecttionRole.Arn
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${SourceCodeprefix}FSI-SentimentDetecttion-82a6bf78-2382-479e-b112-5d96d99561ef.zip'

 FSISentimentDetecttionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FSI-SentimentDetecttion-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/ComprehendReadOnly
 
 FSIKeyPhrasesDetection:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: FSI-KeyPhrasesDetection
      Runtime: python3.10
      Timeout: 600
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FSIKeyPhrasesDetectionRole.Arn
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${SourceCodeprefix}FSI-KeyPhrasesDetection-6b3c773e-4dbc-4930-b569-0f4ad3cfb9c9.zip'
      Environment:
        Variables:
          AUDIOTRANSCRIPTS_SOURCE_BUCKET : !Ref MultimodalOutputBucketResource
          AUDIOTRANSCRIPTS_SOURCE_KEY : 'q1-2023-earnings-call.mp3.txt'

 FSIKeyPhrasesDetectionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FSI-KeyPhrasesDetection-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/ComprehendReadOnly
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

 FSITranscribe:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: FSI-Transcribe
      Runtime: python3.10
      Timeout: 600
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FSITranscribeRole.Arn
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${SourceCodeprefix}FSI-Transcribe-df01dca6-8e3c-46cc-b9a9-aa9e33215abc.zip'
      Environment:
        Variables:
          AUDIOTRANSCRIPTS_DEST_BUCKET_PREFIX : !Ref AUDIOTRANSCRIPTSDESTBUCKETPREFIX
          MULTIMODAL_OUTPUT_BUCKET  : !Ref MultimodalOutputBucketResource
          AUDIOTRANSCRIPTS_SOURCE_BUCKET : !Ref AudioTranscriptsSourceBucketResource

 FSITranscribeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FSI-Transcribe-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

 FSITextractRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FSI-Textract-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess

 FSITextractAsyncInvocationFunction:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: FSI-TextractAsyncInvocationFunction
      Runtime: python3.10
      Timeout: 600
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FSITextractAsyncInvocationFunctionRole.Arn
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${SourceCodeprefix}FSI-TextractAsyncInvocationFunction-759363ea-7b4b-411c-a96f-b137a595387b.zip'

 FSITextractAsyncInvocationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FSI-TextractAsyncInvocationFunction-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

 TextExractRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: TextExractRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: textract.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:textract:*:${AWS::AccountId}:*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonTextractServiceRole

 KendraIndex:
  DependsOn: SampleKendraIndexServiceRole
  Type: 'AWS::Kendra::Index'
  Properties:
    Name: FSIKendraIndex
    RoleArn: !GetAtt SampleKendraIndexServiceRole.Arn
    Description: FSI Kendra Index
    Edition: DEVELOPER_EDITION
    CapacityUnits:
      QueryCapacityUnits: 1
      StorageCapacityUnits: 1


 KendraDataSource:
  DependsOn: KendraDataSourceRole
  Type: 'AWS::Kendra::DataSource'
  Properties:
    DataSourceConfiguration:
      S3Configuration:
        BucketName: !Ref MultimodalOutputBucketResource
    Description: 'FSI Index'
    IndexId: !Ref KendraIndex
    Name: 'FSIDatasource'
    RoleArn: !GetAtt KendraDataSourceRole.Arn
    Schedule: "cron(* 0 * * ? *)"
    Type: 'S3'


 KendraDataSourceRole:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: MyKendraDataSourceRole
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: [kendra.amazonaws.com]
          Action: ['sts:AssumeRole']
    Policies:
      - PolicyName: KendraDataSourcePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow 
              Action:
                - s3:GetObject
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: "*"
            - Effect: Allow
              Action:
                - kendra:BatchPutDocument
                - kendra:BatchDeleteDocument
              Resource: "*"

 SampleKendraIndexServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: kendra.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: KendraIndexPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                    StringEquals:
                      cloudwatch:namespace: AWS/Kendra
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*:log-stream:*
 multiagentllmstockdata:
    Type: 'AWS::S3::Bucket'


 blogstockpricesdb:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name:  blog-stock-prices-db
        Description: "Database for Stock information"
      CatalogId: !Ref AWS::AccountId

 gluetable:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref blogstockpricesdb
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: stock_prices
        Parameters: { "classification" : "csv" }
        StorageDescriptor:
          Location: !Sub "s3://${multiagentllmstockdata}/"
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
          SerdeInfo:
            Parameters: { "separatorChar" : "," }
            SerializationLibrary: "org.apache.hadoop.hive.serde2.OpenCSVSerde"
          StoredAsSubDirectories: false
          Columns:
            - Name: date
              Type: string
            - Name: AAAA
              Type: double
            - Name: FF
              Type: double
            - Name: BBBB
              Type: double
            - Name: ZZZZ
              Type: double
            - Name: GG
              Type: double
            - Name: DDD
              Type: double
            - Name: WWW
              Type: double
            - Name: CCC
              Type: double
            - Name: GGMM
              Type: double
            - Name: TTT
              Type: double
            - Name: UUU
              Type: double
            - Name: SSSS
              Type: double
            - Name: XXX
              Type: double
            - Name: RRR
              Type: double
            - Name: YYY
              Type: double
            - Name: MM
              Type: double
            - Name: PPP
              Type: double
            - Name: JJJ
              Type: double
            - Name: SSXX
              Type: double


 stockpricescrawlerrole:
    Type: AWS::IAM::Role
    Properties:
       AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "glue.amazonaws.com"
            Action: "sts:AssumeRole"
       ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"

 GlueCrawlerPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "your-glue-crawler-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "glue:*"
            Resource:
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${blogstockpricesdb}"
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${blogstockpricesdb}/${gluetable}"
      Roles:
        - !Ref stockpricescrawlerrole
 ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chat_history
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

 stockpricescrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: stockpricescrawler
      Role: !GetAtt stockpricescrawlerrole.Arn
      #Classifiers: none, use the default classifier
      Description: AWS Glue crawler to crawl stock data
      #Schedule: none, use default run-on-demand
      DatabaseName: !Ref blogstockpricesdb
      Targets:
        S3Targets:
          # Public S3 bucket with the flights data
          - Path: !Sub "s3://${multiagentllmstockdata}/"
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"

 
 CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'SourceCodeBucket'
      Prefix: !Ref SourceCodeprefix
      Objects:
          - FSI-textextract-47f9723d-dfff-4b72-a9b2-4758f612aec6.zip
          - FSI-KeyPhrasesDetection-6b3c773e-4dbc-4930-b569-0f4ad3cfb9c9.zip
          - FSI-SentimentDetecttion-82a6bf78-2382-479e-b112-5d96d99561ef.zip
          - FSI-Transcribe-df01dca6-8e3c-46cc-b9a9-aa9e33215abc.zip
          - FSI-TextractAsyncInvocationFunction-759363ea-7b4b-411c-a96f-b137a595387b.zip  
 CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${SourceCodeBucket}/${SourceCodeprefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${SourceCodeprefix}*'
 CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.10
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

Outputs:
  MultimodalOutputBucket:
    Value:
      Fn::Sub: "s3://${MultimodalOutputBucketResource}/"
  PDFSourceBucket:
    Value:
      Fn::Sub: "s3://${TextractSourceBucketResource}/"
  AudioSourceBucket:
    Value:
      Fn::Sub: "s3://${AudioTranscriptsSourceBucketResource}/"
  FSITextractLambdaFunction:
    Value:
      !GetAtt FSITextract.Arn
  FSISentimentDetecttionLambdaFunction:
    Value:
      !GetAtt FSISentimentDetecttion.Arn
  FSIKeyPhrasesDetectionLambdaFunction:
    Value:
      !GetAtt FSIKeyPhrasesDetection.Arn
  FSITranscribeLambdaFunction:
    Value:
      !GetAtt FSITranscribe.Arn
  KendraIndexId:
    Value:
      !GetAtt KendraIndex.Id
  KendraDataSourceId:
    Value:
      !GetAtt KendraDataSource.Id
  MultiAgentllmStockData:
    Value:
      Fn::Sub: "s3://${multiagentllmstockdata}/"

  stockpricesdb:
    Value: !Ref blogstockpricesdb

  NotebookInstanceName:
    Value: !Ref MultiModalSagemakerNotebookInstance
    Description: Name of the SageMaker notebook instance
  
  QueryStagingBucket:
    Value:
      Fn::Sub: "s3://${QueryStagingBucket}/"

  StockDataSourceBucket:
    Value:
      Fn::Sub: "s3://${StockDataSourceBucket}/"    
  ChatHistoryTableName:
    Value: !Ref ChatHistoryTable
    Description: The name of the created DynamoDB table for chat history
  AWSRegion:
    Value: !Ref AWS::Region
    Description: The AWS region where the stack is being created
    
